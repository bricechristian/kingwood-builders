---
import { useSanityClient } from "astro-sanity";
import { urlForImage } from "../utilities/sanityImage.js";

import Layout from "../layouts/Layout.astro";
import FeaturedProjects from "../components/FeaturedProjects.astro"
import TextImage from "../components/TextImage.astro"
import Services from "../components/Services.astro"
import Team from "../components/Team.astro"
import Steps from "../components/Steps.astro"
import CtaLargeText from "../components/CtaLargeText.astro"

export const prerender = true;

let previewResponse;
let responseJSON;

if(Astro.url.search.includes("preview=true")){
    previewResponse = await fetch(
        `https://kingwood-builders.netlify.app/.netlify/functions/preview?type=page&slug=${Astro.params.slug}`
    );
    responseJSON = await previewResponse.json();
}


export async function getStaticPaths() {
	const data = await useSanityClient().fetch(`
    *[_type=='page'] {
      ...
    }
  `);
	let paths = [];
	data.map(({ slug }) => paths.push({ params: { slug: slug.current } }));

	return paths;
}

const { slug } = Astro.params;

const data = responseJSON === undefined ? await useSanityClient().fetch(`
*[_type=='page' && slug.current == '${slug}'][0] {
	...,
	content[] {
		...,
        projects[]->
	}	
}
`) : responseJSON.data;

if (!data) return Astro.redirect("/404");

---

<Layout
	noindex={data.settings?.noindex ? data.settings.noindex : false}
	title={data.title}
>
	{
		data.content?.map((section) => {
			switch (section._type) {
				case "projectCarousel":
                    return (
                        <FeaturedProjects data={section.projects} /> 
                    )
				case "textImage":
                    return (
                        <TextImage data={section} /> 
                    )
                case "services":
                    return (
                        <Services data={section} /> 
                    )
				case "team":
                    return (
                        <Team data={section} /> 
                    )
				case "steps":
                    return (
                        <Steps data={section} /> 
                    )
				case "ctaLargeText":
                    return (
                        <CtaLargeText data={section} /> 
                    )
				default:
                    return (
                        <section class="py-40">
                            <div class="grid-layout text-center">
                                <div class="grid-span-xl">
                                    <h1
                                        class="justify-center"
                                        data-viewport="typography-shift">
                                        <span>{data.title}</span>
                                    </h1>
                                </div>
                            </div>
                        </section>
                    )
			}
		})
	}
</Layout>

<script define:vars={{ data }}>
    console.log(data.content)
</script>